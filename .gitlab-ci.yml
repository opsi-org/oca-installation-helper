image: docker.uib.gmbh/opsi/dev/pybuilder:uib-python-3.9

stages:
  - test
  - build
  - viruscheck


.parseoutput: &parseoutput |
  #variables
    malicious_limit="3"
    total_engines=`grep -c "engine_name" $results` || true
    malicious_engines=`grep -c "category: malicious" $results` || true
    malicious_percentage=`awk -v total_engines=$total_engines -v malicious_engines=$malicious_engines 'BEGIN {print (100/total_engines*malicious_engines)}'`
    timed_out_engines=`grep -c "category: timeout" $results` || true
    timed_out_percentage=`awk -v total_engines=$total_engines -v timed_out_engines=$timed_out_engines 'BEGIN {print (100/total_engines*timed_out_engines)}'`
    type_unsupported_engines=`grep -c "category: type-unsupported" $results` || true
    type_unsupported_percentage=`awk -v total_engines=$total_engines -v type_unsupported_engines=$type_unsupported_engines 'BEGIN {print (100/total_engines*type_unsupported_engines)}'` || true
    successful_engines=`expr $total_engines - $malicious_engines - $timed_out_engines - $type_unsupported_engines` || true
    successful_percentage=`awk -v total_engines=$total_engines -v successful_engines=$successful_engines 'BEGIN {print (100/total_engines*successful_engines)}'`
  #summary
    echo -e "\nSummary:"
    echo -e "\e[1;32m$total_engines engines in total\e[0m"
    echo -e "\e[1;32m$successful_engines engines scanned the file(s) successfully ($successful_percentage%)\e[0m"
    echo -e "\e[1;34m$timed_out_engines engine(s) timed out ($timed_out_percentage%):\e[0m"
    awk '/category: timeout/{getline; print}' $results | sed s/"engine_name: "// || true
    echo -e "\e[1;34m$type_unsupported_engines engine(s) reported the file(s) as type-unsupported ($type_unsupported_percentage%):\e[0m"
    awk '/type-unsupported/{getline; print}' $results | sed s/"engine_name: "// || true
    echo -e "\e[1;31m$malicious_engines engine(s) reported the file(s) as malicious ($malicious_percentage%):\e[0m"
    grep -A 5 "category: malicious" $results || true
    if [ $malicious_engines -le $malicious_limit ]; then echo -e "\e[1;32mThis is less than or equal to the set limit of $malicious_limit engines\e[0m" || true; else echo -e "\e[1;31mThis is more than the set limit of $malicious_limit engines\e[0m" && exit 1; fi


test:pytest-darwin:
  stage: test
  tags:
    - macos_catalina
  script:
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport.xml --cov-append --cov ocainstallationhelper --cov-report term --cov-report xml -v
    - mv .coverage coverage_darwin
  artifacts:
    name: 'oca-installation-helper_test_darwin'
    paths:
      - coverage.xml
      - testreport.xml
      - coverage_darwin
    expire_in: 3 days

test:pytest-windows:
  stage: test
  tags:
    - win10
  script:
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport.xml --cov-append --cov ocainstallationhelper --cov-report term --cov-report xml -v
    - Rename-Item -Path .coverage -NewName coverage_windows
  artifacts:
    name: 'oca-installation-helper_test_windows'
    paths:
      - coverage.xml
      - testreport.xml
      - coverage_windows
    expire_in: 3 days

test:pytest-linux:
  stage: test
  script:
    - poetry install
    - poetry run pytest --tb=short -o junit_family=xunit2 --junitxml=testreport.xml --cov-append --cov ocainstallationhelper --cov-report term --cov-report xml -v
    - mv .coverage coverage_linux
  artifacts:
    name: 'oca-installation-helper_test_linux'
    paths:
      - coverage.xml
      - testreport.xml
      - coverage_linux
    reports:
      junit: testreport.xml
    expire_in: 3 days

test:pylint-pytest:
  stage: test
  needs:
    # We want to combine test coverage from all test jobs
    - job: test:pytest-windows
      artifacts: true
    - job: test:pytest-darwin
      artifacts: true
    - job: test:pytest-linux
      artifacts: true
  script:
    - apt-get update
    - apt-get --yes install sqlite3
    - poetry install
    - poetry run pylint --disable=R,fixme ocainstallationhelper tests
    - poetry run flake8 ocainstallationhelper tests
    - poetry run mypy ocainstallationhelper tests
    - for db in coverage_*; do sqlite3 $db 'update file set path=replace(substr(path,instr(path,"ocainstallationhelper")),"\","/");'; done
    - echo -e '[run]\nrelative_files = True\n' > .coveragerc
    - poetry run coverage combine coverage_*
    - poetry run coverage xml
    - poetry run coverage report
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    name: 'oca-installation-helper_test'
    paths:
      - coverage.xml
    expire_in: 3 days
    reports:
      cobertura: coverage.xml


build:pyinstaller-darwin-x64:
  stage: build
  tags:
    - macos_catalina
  script:
    - poetry install
    - poetry run opsi-dev-tool -l info --pyinstaller-poetry-build
    - ./dist/oca-installation-helper --version
    - '[ "$CI_COMMIT_TAG" = "" ] && poetry run opsi-dev-tool -l info --binary-push dist/oca-installation-helper "$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || poetry run opsi-dev-tool -l info --binary-push dist/oca-installation-helper'

build:pyinstaller-linux-x64:
  stage: build
  script:
    - poetry install
    - poetry run opsi-dev-tool -l info --pyinstaller-poetry-build
    - ./dist/oca-installation-helper --version
    - '[ "$CI_COMMIT_TAG" = "" ] && opsi-dev-tool -l info --binary-push dist/oca-installation-helper "$CI_JOB_ID"'
    - '[ "$CI_COMMIT_TAG" = "" ] || opsi-dev-tool -l info --binary-push dist/oca-installation-helper'

build:pyinstaller-windows-x86:
  stage: build
  tags:
    - win10
  script:
    - poetry install
    - poetry run opsi-dev-tool -l debug --pyinstaller-poetry-build
    - poetry run opsi-dev-tool -l info --signserver-sign dist\oca-installation-helper.exe
    # Check if binary is working
    - dist\oca-installation-helper.exe --version
    # Push to binaryindex
    - if (! $CI_COMMIT_TAG) {poetry run opsi-dev-tool -l info --binary-push dist\oca-installation-helper.exe "$CI_JOB_ID"}
    - if ($CI_COMMIT_TAG) {poetry run opsi-dev-tool -l info --binary-push dist\oca-installation-helper.exe}
  artifacts:
    name: 'windows_binary'
    paths:
      - dist\oca-installation-helper.exe

viruscheck:virustotal:
  stage: viruscheck
  script:
    - opsi-dev-tool -l debug --virustotal-analysis dist/oca-installation-helper.exe --output-type simple --output-file ./virustotal-results.txt || true
    - results="./virustotal-results.txt"
    - *parseoutput
  artifacts:
    name: virustotal-results
    paths:
      - "./virustotal-results.txt"
  #only:
  #  - tags
